<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aninstein.mapper.NotestPOMapper">
  <resultMap id="BaseResultMap" type="com.aninstein.po.NotestPO">
    <id column="number" jdbcType="INTEGER" property="number" />
    <result column="level" jdbcType="VARCHAR" property="level" />
    <result column="id" jdbcType="VARCHAR" property="id" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="date" jdbcType="VARCHAR" property="date" />
    <result column="pos" jdbcType="VARCHAR" property="pos" />
    <result column="neg" jdbcType="VARCHAR" property="neg" />
    <result column="mark" jdbcType="INTEGER" property="mark" />
    <result column="sum" jdbcType="INTEGER" property="sum" />
    <result column="ratio" jdbcType="REAL" property="ratio" />
    <result column="flag" jdbcType="INTEGER" property="flag" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    number, level, id, content, date, pos, neg, mark, sum, ratio, flag
  </sql>
  <select id="selectByExample" parameterType="com.aninstein.po.example.NotestPOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from notest
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from notest
    where number = #{number,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from notest
    where number = #{number,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.aninstein.po.example.NotestPOExample">
    delete from notest
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.aninstein.po.NotestPO">
    insert into notest (number, level, id, 
      content, date, pos, 
      neg, mark, sum, ratio, 
      flag)
    values (#{number,jdbcType=INTEGER}, #{level,jdbcType=VARCHAR}, #{id,jdbcType=VARCHAR}, 
      #{content,jdbcType=VARCHAR}, #{date,jdbcType=VARCHAR}, #{pos,jdbcType=VARCHAR}, 
      #{neg,jdbcType=VARCHAR}, #{mark,jdbcType=INTEGER}, #{sum,jdbcType=INTEGER}, #{ratio,jdbcType=REAL}, 
      #{flag,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.aninstein.po.NotestPO">
    insert into notest
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="number != null">
        number,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="id != null">
        id,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="pos != null">
        pos,
      </if>
      <if test="neg != null">
        neg,
      </if>
      <if test="mark != null">
        mark,
      </if>
      <if test="sum != null">
        sum,
      </if>
      <if test="ratio != null">
        ratio,
      </if>
      <if test="flag != null">
        flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        #{level,jdbcType=VARCHAR},
      </if>
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=VARCHAR},
      </if>
      <if test="pos != null">
        #{pos,jdbcType=VARCHAR},
      </if>
      <if test="neg != null">
        #{neg,jdbcType=VARCHAR},
      </if>
      <if test="mark != null">
        #{mark,jdbcType=INTEGER},
      </if>
      <if test="sum != null">
        #{sum,jdbcType=INTEGER},
      </if>
      <if test="ratio != null">
        #{ratio,jdbcType=REAL},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.aninstein.po.example.NotestPOExample" resultType="java.lang.Long">
    select count(*) from notest
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update notest
    <set>
      <if test="record.number != null">
        number = #{record.number,jdbcType=INTEGER},
      </if>
      <if test="record.level != null">
        level = #{record.level,jdbcType=VARCHAR},
      </if>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.date != null">
        date = #{record.date,jdbcType=VARCHAR},
      </if>
      <if test="record.pos != null">
        pos = #{record.pos,jdbcType=VARCHAR},
      </if>
      <if test="record.neg != null">
        neg = #{record.neg,jdbcType=VARCHAR},
      </if>
      <if test="record.mark != null">
        mark = #{record.mark,jdbcType=INTEGER},
      </if>
      <if test="record.sum != null">
        sum = #{record.sum,jdbcType=INTEGER},
      </if>
      <if test="record.ratio != null">
        ratio = #{record.ratio,jdbcType=REAL},
      </if>
      <if test="record.flag != null">
        flag = #{record.flag,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update notest
    set number = #{record.number,jdbcType=INTEGER},
      level = #{record.level,jdbcType=VARCHAR},
      id = #{record.id,jdbcType=VARCHAR},
      content = #{record.content,jdbcType=VARCHAR},
      date = #{record.date,jdbcType=VARCHAR},
      pos = #{record.pos,jdbcType=VARCHAR},
      neg = #{record.neg,jdbcType=VARCHAR},
      mark = #{record.mark,jdbcType=INTEGER},
      sum = #{record.sum,jdbcType=INTEGER},
      ratio = #{record.ratio,jdbcType=REAL},
      flag = #{record.flag,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.aninstein.po.NotestPO">
    update notest
    <set>
      <if test="level != null">
        level = #{level,jdbcType=VARCHAR},
      </if>
      <if test="id != null">
        id = #{id,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=VARCHAR},
      </if>
      <if test="pos != null">
        pos = #{pos,jdbcType=VARCHAR},
      </if>
      <if test="neg != null">
        neg = #{neg,jdbcType=VARCHAR},
      </if>
      <if test="mark != null">
        mark = #{mark,jdbcType=INTEGER},
      </if>
      <if test="sum != null">
        sum = #{sum,jdbcType=INTEGER},
      </if>
      <if test="ratio != null">
        ratio = #{ratio,jdbcType=REAL},
      </if>
      <if test="flag != null">
        flag = #{flag,jdbcType=INTEGER},
      </if>
    </set>
    where number = #{number,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.aninstein.po.NotestPO">
    update notest
    set level = #{level,jdbcType=VARCHAR},
      id = #{id,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      date = #{date,jdbcType=VARCHAR},
      pos = #{pos,jdbcType=VARCHAR},
      neg = #{neg,jdbcType=VARCHAR},
      mark = #{mark,jdbcType=INTEGER},
      sum = #{sum,jdbcType=INTEGER},
      ratio = #{ratio,jdbcType=REAL},
      flag = #{flag,jdbcType=INTEGER}
    where number = #{number,jdbcType=INTEGER}
  </update>
</mapper>